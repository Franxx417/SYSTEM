var u=(a,t)=>()=>(t||a((t={exports:{}}).exports,t),t.exports);var l=u((d,o)=>{class c{static SYNC_FREQUENCY=3e4;static MAX_RETRIES=3;static CACHE_KEY="status_config";constructor(){this.isActive=!1,this.syncInterval=null,this.lastSyncTime=null,this.retryCount=0,this.init()}init(){this.shouldStartSync()&&this.startSync(),document.addEventListener("visibilitychange",()=>{document.hidden?this.pauseSync():this.resumeSync()}),window.addEventListener("online",()=>this.handleOnline()),window.addEventListener("offline",()=>this.handleOffline())}shouldStartSync(){return window.location.pathname.includes("/superadmin")}startSync(){this.isActive||(this.isActive=!0,this.performSync(),this.syncInterval=setInterval(()=>{this.performSync()},c.SYNC_FREQUENCY),console.log("Status sync started"))}pauseSync(){this.syncInterval&&(clearInterval(this.syncInterval),this.syncInterval=null),this.isActive=!1,console.log("Status sync paused")}resumeSync(){!this.isActive&&this.shouldStartSync()&&this.startSync()}stopSync(){this.pauseSync(),console.log("Status sync stopped")}async performSync(){try{const t=document.querySelector('meta[name="csrf-token"]')?.getAttribute("content");if(!t){console.warn("No CSRF token found for status sync"),this.pauseSync();return}const s=await fetch("/superadmin?ajax=status",{method:"GET",headers:{"X-Requested-With":"XMLHttpRequest","X-CSRF-TOKEN":t},credentials:"same-origin"});if(s.ok){const e=await s.json();this.handleSyncSuccess(e),this.retryCount=0}else if(s.status===403){console.warn("Status sync stopped: Unauthorized access"),this.pauseSync();return}else throw new Error(`HTTP ${s.status}: ${s.statusText}`)}catch(t){this.handleSyncError(t)}}handleSyncSuccess(t){this.lastSyncTime=new Date,this.updateStatusIndicators(t),document.dispatchEvent(new CustomEvent("statusSync",{detail:{data:t,timestamp:this.lastSyncTime}}))}handleSyncError(t){if(console.error("Status sync error:",t),this.retryCount++,this.retryCount>=c.MAX_RETRIES)console.warn("Max retries reached, pausing status sync"),this.pauseSync();else{const s=Math.min(1e3*Math.pow(2,this.retryCount),3e4);setTimeout(()=>{this.isActive&&this.performSync()},s)}document.dispatchEvent(new CustomEvent("statusSyncError",{detail:{error:t,retryCount:this.retryCount}}))}updateStatusIndicators(t){const s=document.querySelector('[data-status="system"]');s&&t.system_status&&(s.className=`status-indicator status-${t.system_status}`,s.title=`System Status: ${t.system_status}`),t.po_statuses&&t.po_statuses.forEach(n=>{document.querySelectorAll(`[data-po-status="${n.status_name}"]`).forEach(r=>{n.color&&(r.style.backgroundColor=n.color),n.css_class&&(r.className=`status-indicator ${n.css_class}`)})});const e=document.querySelector("[data-last-sync]");e&&(e.textContent=this.formatTime(this.lastSyncTime),e.title=`Last sync: ${this.lastSyncTime.toLocaleString()}`);const i=document.querySelector("[data-connection-status]");i&&(i.textContent="Connected",i.className="connection-status connected")}handleOnline(){console.log("Connection restored, resuming status sync"),this.retryCount=0,this.resumeSync();const t=document.querySelector("[data-connection-status]");t&&(t.textContent="Connected",t.className="connection-status connected")}handleOffline(){console.log("Connection lost, pausing status sync"),this.pauseSync();const t=document.querySelector("[data-connection-status]");t&&(t.textContent="Offline",t.className="connection-status offline")}formatTime(t){if(!t)return"Never";const e=new Date-t;return e<6e4?"Just now":e<36e5?`${Math.floor(e/6e4)}m ago`:t.toLocaleTimeString()}getLastSyncTime(){return this.lastSyncTime}isRunning(){return this.isActive}forceSync(){this.isActive&&this.performSync()}}document.addEventListener("DOMContentLoaded",()=>{try{window.statusSync=new c,console.log("StatusSync initialized successfully")}catch(a){console.error("Failed to initialize StatusSync:",a)}});typeof o<"u"&&o.exports&&(o.exports=c)});export default l();
