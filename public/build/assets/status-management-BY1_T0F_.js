class i{static ENDPOINTS={UPDATE:"/admin/status/update",REMOVE:"/admin/status/remove",REORDER:"/admin/status/reorder",CONFIG:"/admin/status/config",RESET:"/admin/status/reset"};static showNotification(t,e="info",a=5e3){const r={success:"alert-success",error:"alert-danger",warning:"alert-warning",info:"alert-info"}[e]||"alert-info",s=document.createElement("div");s.className=`alert ${r} alert-dismissible fade show position-fixed`,s.style.cssText="top: 20px; right: 20px; z-index: 9999; min-width: 300px;",s.innerHTML=`
            ${t}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `,document.body.appendChild(s),setTimeout(()=>{s.parentNode&&s.parentNode.removeChild(s)},a)}static getCsrfToken(){return document.querySelector('meta[name="csrf-token"]')?.getAttribute("content")}static async apiRequest(t,e={}){const a={headers:{"Content-Type":"application/json","X-CSRF-TOKEN":this.getCsrfToken(),"X-Requested-With":"XMLHttpRequest"}},r={...a,...e,headers:{...a.headers,...e.headers}};try{const s=await fetch(t,r),o=await s.json();if(!s.ok)throw new Error(o.message||`HTTP ${s.status}`);return o}catch(s){throw console.error("API Request failed:",s),s}}static async updateStatus(t,e){try{const a=await this.apiRequest(this.ENDPOINTS.UPDATE,{method:"POST",body:JSON.stringify({status_name:t,...e})});if(a.success)return this.showNotification(a.message,"success"),!0;throw new Error(a.message)}catch(a){return this.showNotification(a.message||"Failed to update status","error"),!1}}static async removeStatus(t){if(!confirm(`Are you sure you want to remove the "${t}" status?`))return!1;try{const e=await this.apiRequest(this.ENDPOINTS.REMOVE,{method:"POST",body:JSON.stringify({status_name:t})});if(e.success)return this.showNotification(e.message,"success"),!0;throw new Error(e.message)}catch(e){return this.showNotification(e.message||"Failed to remove status","error"),!1}}static async reorderStatuses(t){try{const e=await this.apiRequest(this.ENDPOINTS.REORDER,{method:"POST",body:JSON.stringify({status_order:t})});if(e.success)return this.showNotification(e.message,"success"),!0;throw new Error(e.message)}catch(e){return this.showNotification(e.message||"Failed to reorder statuses","error"),!1}}static async getConfig(){try{return await this.apiRequest(this.ENDPOINTS.CONFIG)}catch(t){throw this.showNotification("Failed to load configuration","error"),t}}static async resetToDefault(){if(!confirm("Are you sure you want to reset all status configurations to default? This cannot be undone."))return!1;try{const t=await this.apiRequest(this.ENDPOINTS.RESET,{method:"POST"});if(t.success)return this.showNotification(t.message,"success"),!0;throw new Error(t.message)}catch(t){return this.showNotification(t.message||"Failed to reset configuration","error"),!1}}static generateCssClass(t){return"status-"+t.toLowerCase().replace(/[^a-z0-9]/g,"-")}static updateStatusIndicator(t,e){document.querySelectorAll(`[data-status="${t}"] .status-indicator`).forEach(r=>{r.style.backgroundColor=e})}static async exportConfig(){try{const t=await this.getConfig(),e=JSON.stringify(t,null,2),a=new Blob([e],{type:"application/json"}),r=URL.createObjectURL(a),s=document.createElement("a");s.href=r,s.download=`status_configuration_${new Date().toISOString().split("T")[0]}.json`,s.click(),URL.revokeObjectURL(r),this.showNotification("Configuration exported successfully","success")}catch{this.showNotification("Failed to export configuration","error")}}static initializeSortable(t,e){const a=document.getElementById(t);return!a||typeof Sortable>"u"?null:Sortable.create(a,{handle:".drag-handle",animation:150,onEnd:e})}}window.StatusManager=i;
