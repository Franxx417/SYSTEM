class r{constructor(){this.syncKey="status_color_sync_event",this.lastUpdateKey="status_color_last_update",this.checkInterval=1e3,this.listeners=[],this.init()}init(){window.addEventListener("storage",t=>{if(t.key===this.syncKey&&t.newValue){const e=JSON.parse(t.newValue);this.handleSyncEvent(e)}}),setInterval(()=>{this.checkForUpdates()},this.checkInterval),console.log("Status Color Sync initialized")}notifyColorChange(t,e,o){const a={statusId:t,statusName:e,color:o.toUpperCase(),timestamp:Date.now(),source:window.location.pathname};localStorage.setItem(this.syncKey,JSON.stringify(a)),localStorage.setItem(this.lastUpdateKey,a.timestamp.toString()),this.triggerListeners(a),console.log("Color change notified:",a)}handleSyncEvent(t){const e=parseInt(localStorage.getItem(this.lastUpdateKey)||"0");t.timestamp>e&&t.source!==window.location.pathname&&(console.log("Processing sync event:",t),this.triggerListeners(t),localStorage.setItem(this.lastUpdateKey,t.timestamp.toString()))}checkForUpdates(){const t=localStorage.getItem(this.syncKey);if(t){const e=JSON.parse(t);this.handleSyncEvent(e)}}onColorChange(t){this.listeners.push(t)}triggerListeners(t){this.listeners.forEach(e=>{try{e(t)}catch(o){console.error("Error in sync listener:",o)}})}async updateColorInDatabase(t,e){const o=document.querySelector('meta[name="csrf-token"]')?.content;if(!o)throw new Error("CSRF token not found");const a=await fetch(`/admin/status/${t}`,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":o},body:JSON.stringify({_method:"PUT",color:e,sync_only_color:!0})});if(!a.ok)throw new Error("Failed to update color in database");return await a.json()}async getStatusColors(){const t=document.querySelector('meta[name="csrf-token"]')?.content,e=await fetch("/admin/status/config",{method:"GET",headers:{"X-CSRF-TOKEN":t}});if(!e.ok)throw new Error("Failed to fetch status colors");return(await e.json()).config||{}}updatePageIndicators(t,e){console.log(`Updating indicators for "${t}" to ${e}`),document.querySelectorAll(`[data-status="${t}"]`).forEach(o=>{o.type==="color"&&(o.value=e,console.log(`Updated color picker for ${t}`))}),document.querySelectorAll(".status-indicator[data-status-name]").forEach(o=>{o.getAttribute("data-status-name")===t&&(o.style.backgroundColor=e,o.setAttribute("data-status-color",e),console.log(`Updated status indicator for ${t}`))}),document.querySelectorAll("[data-status-badge]").forEach(o=>{o.getAttribute("data-status-badge")===t&&(o.style.backgroundColor=e,console.log(`Updated badge for ${t}`))}),document.querySelectorAll(`.sortable-item[data-status-name="${t}"]`).forEach(o=>{const a=o.querySelector(".status-indicator");a&&(a.style.backgroundColor=e);const s=o.querySelector(".badge");s&&(s.style.backgroundColor=e)}),document.querySelectorAll("[data-status-color]").forEach(o=>{o.getAttribute("data-status-name")===t&&(o.style.backgroundColor=e,o.setAttribute("data-status-color",e))})}async broadcastUpdate(t,e,o){try{return await this.updateColorInDatabase(t,o),this.notifyColorChange(t,e,o),{success:!0}}catch(a){return console.error("Error broadcasting update:",a),{success:!1,error:a.message}}}clearSync(){localStorage.removeItem(this.syncKey),localStorage.removeItem(this.lastUpdateKey)}getSyncStats(){const t=localStorage.getItem(this.syncKey),e=localStorage.getItem(this.lastUpdateKey);return{hasData:!!t,lastUpdate:e?new Date(parseInt(e)):null,listeners:this.listeners.length,currentPage:window.location.pathname}}}window.statusColorSync=new r;
